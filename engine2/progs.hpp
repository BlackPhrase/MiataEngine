/*
Copyright (C) 1996-1997 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/

#pragma once

#include "pr_comp.hpp"  // defs shared with qcc
#include "progdefs.hpp" // generated by program cdefs

#define MAX_ENT_LEAFS 16

typedef struct edict_s
{
	qboolean free;
	link_t area; // linked to a division node or leaf

	int num_leafs;
	short leafnums[MAX_ENT_LEAFS];

	entity_state_t baseline;

	float freetime; // sv.time when the object was freed
	entvars_t v;    // C exported fields from progs
	                // other fields from progs come immediately after
} edict_t;

#define EDICT_FROM_AREA(l) STRUCT_FROM_LINK(l, edict_t, area)

//============================================================================

extern char *pr_strings;
extern globalvars_t *pr_global_struct;

//============================================================================

void PR_Init();

void PR_Profile_f();

edict_t *ED_Alloc();
void ED_Free(edict_t *ed);

char *ED_NewString(const char *string);
// returns a copy of the string allocated from the server's string heap

void ED_Print(edict_t *ed);
void ED_Write(FILE *f, edict_t *ed);
char *ED_ParseEdict(const char *data, edict_t *ent);

void ED_LoadFromFile(const char *data);

edict_t *EDICT_NUM(int n);
int NUM_FOR_EDICT(edict_t *e);

#define EDICT_TO_PROG(e) ((byte *)e - (byte *)sv.edicts)
#define PROG_TO_EDICT(e) ((edict_t *)((byte *)sv.edicts + e))

//============================================================================

#define E_FLOAT(e, o) (((float *)&e->v)[o])
#define E_INT(e, o) (*(int *)&((float *)&e->v)[o])
#define E_VECTOR(e, o) (&((float *)&e->v)[o])
#define E_STRING(e, o) (pr_strings + *(string_t *)&((float *)&e->v)[o])

extern int pr_argc;

void ED_PrintEdicts();
void ED_PrintNum(int ent);